import{_ as i}from"./slidev/VClicks-y1NUGG8K.js";import{b as u,o as p,w as s,g as t,e as m,ad as e,v as c,x as d,T as l}from"./modules/vue-vE-eLd24.js";import{I as g}from"./slidev/default-BTdren0y.js";import{u as f,f as _}from"./slidev/context-B_fzKaKS.js";import"./index-Btdoxgmh.js";import"./modules/shiki-DQqskUY8.js";const A={__name:"slides.md__slidev_16",setup(b){const{$clicksContext:o,$frontmatter:r}=f();return o.setup(),(I,n)=>{const a=i;return p(),u(g,c(d(l(_)(l(r),15))),{default:s(()=>[n[1]||(n[1]=t("h1",null,"📋 Pourquoi WebAssembly Component Model ?",-1)),m(a,{depth:"2"},{default:s(()=>[...n[0]||(n[0]=[t("ul",null,[t("li",null,[t("strong",null,"🧩 Composants isolés"),e(" avec interfaces typées (WIT)")]),t("li",null,[t("strong",null,"🔧 ABI canonique"),t("ul",null,[t("li",null,[t("strong",null,"ABI (Application Binary Interface)"),e(" : accord sur la représentation binaire des données (entiers, big/little-endian, strings UTF-8/UTF-16, paddings, …)")]),t("li",null,[t("strong",null,"ABI Canonique"),e(" : ABI unique garantissant l’interopérabilité - ex: strings C (null-terminated) ↔ Rust (UTF-8) via format commun")])])]),t("li",null,[t("strong",null,"🧠 Interopérabilité automatique"),e(" sans glue code (Rust ↔ Go ↔ JS ↔ Python…)")]),t("li",null,[t("strong",null,"🔡 Types riches et sûrs"),e(" (strings, structs, enums…) au lieu de simples entiers")]),t("li",null,[t("strong",null,"🛡️ Sécurité et isolation"),e(" renforcées - pas d’accès mémoire partagé")]),t("li",null,[t("strong",null,"♻️ Composition fiable"),e(" : assemblage de composants validé par le typage → "),t("strong",null,"Architecture modulaire")])],-1)])]),_:1})]),_:1},16)}}};export{A as default};
